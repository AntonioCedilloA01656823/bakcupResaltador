#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

struct Complex {
    double real;
    double imag;

    Complex(double real, double imag) : real(real), imag(imag) {}
    Complex() : real(0), imag(0) {}

    Complex operator+(const Complex& other) const {
        return Complex(real + other.real, imag + other.imag);
    }

    Complex operator*(const Complex& other) const {
        return Complex(real * other.real - imag * other.imag, real * other.imag + imag * other.real);
    }
};

class Polynomial {
private:
    vector<Complex> coeffs;

public:
    Polynomial(const vector<Complex>& coeffs) : coeffs(coeffs) {}

    Complex evaluate(Complex x) const {
        Complex result(0, 0);
        for (int i = 0; i < coeffs.size(); i++) {
            result = result * x + coeffs[i];
        }
        return result;
    }
};

int main() {
    // Crear un polinomio complejo
    vector<Complex> coeffs = {Complex(1, 2), Complex(-3, 4), Complex(5, -6)};
    Polynomial poly(coeffs);

    // Evaluar el polinomio en un n√∫mero complejo
    Complex x(1, -1);
    Complex y = poly.evaluate(x);

    // Imprimir el resultado
    cout << "El resultado de evaluar el polinomio en " << x.real << " + " << x.imag << "i es: " << y.real << " + " << y.imag << "i" << endl;

    return 0;
}
